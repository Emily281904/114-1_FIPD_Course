// Setup Section (Lines 1-20)
const int RLedPin = 3;  // the PWM pin the Red LED is attached to
const int GLedPin = 5; // the PWM pin the Green LED is attached to
const int BLedPin = 4; // the PWM pin the Blue LED is attached to

int mood = 0;              // the toy's mood state
const int neutralMood = 10; // the neutral mood state
unsigned long previousMillis = 0;
int fadingDirection = 1;

void setup() {
  pinMode(RLedPin, OUTPUT);
  pinMode(GLedPin, OUTPUT);
  pinMode(BLedPin, OUTPUT);

  // initialize the mood state
  mood = neutralMood;
}

// Loop Section (Lines 21-44)
void loop() {
  float brightnessInterval = 255.0 / 10.0;

  if (mood >= neutralMood) {
    // Red (RLedPin) is 255 (Full brightness)
    // Green (GLedPin) increases from 0 to 255 as mood goes from 10 to 20
    // Blue (BLedPin) decreases from 255 to 0 as mood goes from 10 to 20
    analogWrite(RLedPin, 255);
    analogWrite(GLedPin, brightnessInterval * (mood - neutralMood));
    analogWrite(BLedPin, 255 - brightnessInterval * (mood - neutralMood));
  } else {
    // Red (RLedPin) decreases from 255 to 0 as mood goes from 10 to 0
    // Green (GLedPin) increases from 0 to 255 as mood goes from 10 to 0
    // Blue (BLedPin) is 255 (Full brightness)
    analogWrite(RLedPin, 255 - brightnessInterval * (neutralMood - mood));
    analogWrite(GLedPin, brightnessInterval * (neutralMood - mood));
    analogWrite(BLedPin, 255);
  }

  unsigned long currentMillis = millis();
  // Change mood every 1 second (1000 milliseconds)
  if (currentMillis - previousMillis > 1000) {
    mood = mood + fadingDirection;
    // Reverse direction when mood hits 20 or 0
    if (mood >= 20 || mood <= 0) {
      fadingDirection = -fadingDirection;
    }
    previousMillis = currentMillis;
  }
}
